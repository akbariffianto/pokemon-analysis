# -*- coding: utf-8 -*-
"""Pokemon_Dibimbing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kAIMaEtEqfwfYesTeKixPuKAT74lKeDu
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt

DataPokemon = pd.read_csv('Pokemon.csv')
DataPokemon.head()

DataPokemon = DataPokemon.drop(DataPokemon.columns[0], axis=1)
DataPokemon

DataPokemon.info()

DataPokemon.describe()

# Create a new column to indicate if a Pokemon has a form
DataPokemon['Has_Form'] = DataPokemon['Name'].str.contains('Mega|Primal|Forme', regex=True)

# Group the data by Legendary status and the new Has_Form column
grouped_data = DataPokemon.groupby(['Legendary', 'Has_Form'])['Name'].count().unstack(fill_value=0)

# Plot the bar chart
ax = grouped_data.plot(kind='bar', figsize=(10, 6))
plt.title('Number of Legendary and Non-Legendary Pokemon with and without Forms')
plt.xlabel('Legendary Status')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.legend(title='Has Form', labels=['No', 'Yes'])

# Add count labels above the bars
for p in ax.patches:
    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2., p.get_height()), ha='center', va='bottom')

plt.show()

# Print the counts
print("Number of Non-Legendary Pokemon without Forms:", grouped_data.loc[False, False])
print("Number of Non-Legendary Pokemon with Forms:", grouped_data.loc[False, True])
print("Number of Legendary Pokemon without Forms:", grouped_data.loc[True, False])
print("Number of Legendary Pokemon with Forms:", grouped_data.loc[True, True])

# Calculate the number of legendary and non-legendary Pokemon
legendary_count = DataPokemon['Legendary'].value_counts()

# Create a pie chart
plt.pie(legendary_count, labels=['Non Legendary', 'Legendary'], autopct='%1.1f%%')
plt.title('Legendary Vs Non Legendary Pokemon')
plt.show()

print(legendary_count)

# Filter out Pokemon with "Forme" or "Mega" in their names
DataPokemonFiltered = DataPokemon[~DataPokemon['Name'].str.contains("Forme") & ~DataPokemon['Name'].str.contains("Mega")]

# Count legendary and non-legendary Pokemon
legendary_count = DataPokemonFiltered[DataPokemonFiltered['Legendary'] == True].shape[0]
non_legendary_count = DataPokemonFiltered[DataPokemonFiltered['Legendary'] == False].shape[0]

# Create a pie chart
labels = ['Legendary', 'Non-Legendary']
sizes = [legendary_count, non_legendary_count]
colors = ['gold', 'lightskyblue']

plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.title('Proportion of Legendary and Non-Legendary Pokemon')
plt.show()

print("Number of Legendary Pokemon:", legendary_count)
print("Number of Non-Legendary Pokemon:", non_legendary_count)

Legendary = DataPokemon[DataPokemon['Legendary'] == True]
Legendary

print('Min: ', Legendary['Total'].min())
print('Mean: ', Legendary['Total'].mean())
print('Max: ', Legendary['Total'].max())

#Legendary Pokemon with the lowest total stats
lowest_total_legendary = Legendary[Legendary['Total'] == Legendary['Total'].min()]
print("Legendary Pokemon with the Lowest Total Stats:\n", lowest_total_legendary)

#Legendary Pokemon with the highest total stats
highest_total_legendary = Legendary[Legendary['Total'] == Legendary['Total'].max()]
print("\nLegendary Pokemon with the Highest Total Stats:\n", highest_total_legendary)

#Dsiplay all data in Legendary where the Total value is 580
Legendary[Legendary['Total'] == 580]

#Display all data in Legendary where the Total value is 780
Legendary[Legendary['Total'] == 780]

#Group Legendary Pokemon by Generation and calculate the total stats for each generation
legendary_totals_by_generation = Legendary.groupby('Generation')['Total'].sum()

#Create a bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(legendary_totals_by_generation.index, legendary_totals_by_generation.values)
plt.xlabel('Generation')
plt.ylabel('Total Stats')
plt.title('Total Stats of Legendary Pokemon by Generation')

#Add labels with specific total values on top of each bar
for bar in bars:
  yval = bar.get_height()
  plt.text(bar.get_x() + bar.get_width()/2, yval + 5, round(yval, 2), ha='center', va='bottom')

plt.show()

#Count the number of Legendary Pokemon in each generation
legendary_counts_by_generation = Legendary.groupby('Generation')['Name'].count()

#Create a bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(legendary_counts_by_generation.index, legendary_counts_by_generation.values)
plt.xlabel('Generation')
plt.ylabel('Number of Legendary Pokemon')
plt.title('Number of Legendary Pokemon by Generation')

#Add labels with specific counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.2, int(yval), ha='center', va='bottom')

plt.show()

# Filter Pokemon with Total between 580 and 780, and Legendary False
filtered_pokemon = DataPokemon[(DataPokemon['Total'] >= 580) & (DataPokemon['Total'] <= 780) & (DataPokemon['Legendary'] == False)]
filtered_pokemon

#Group Pokemon by Generation and find the Pokemon with the highest Total in each generation
highest_total_pokemon_by_generation = DataPokemon.groupby('Generation').apply(lambda x: x.loc[x['Total'].idxmax()])

#Reset index to make 'Generation' a regular column again
highest_total_pokemon_by_generation = highest_total_pokemon_by_generation.reset_index(drop=True)

#Print the result
print(highest_total_pokemon_by_generation[['Name', 'Generation', 'Total']])

#Pokemon with the highest HP
highest_hp_pokemon = DataPokemon[DataPokemon['HP'] == DataPokemon['HP'].max()]
print("Pokemon with the highest HP:")
print(highest_hp_pokemon[['Name', 'HP']])

#Pokemon with the lowest HP
lowest_hp_pokemon = DataPokemon[DataPokemon['HP'] == DataPokemon['HP'].min()]
print("\nPokemon with the lowest HP:")
print(lowest_hp_pokemon[['Name', 'HP']])

# Pokemon with the highest Attack
highest_attack_pokemon = DataPokemon[DataPokemon['Attack'] == DataPokemon['Attack'].max()]
print("Pokemon with the highest Attack:")
print(highest_attack_pokemon[['Name', 'Attack']])

# Pokemon with the lowest Attack
lowest_attack_pokemon = DataPokemon[DataPokemon['Attack'] == DataPokemon['Attack'].min()]
print("\nPokemon with the lowest Attack:")
print(lowest_attack_pokemon[['Name', 'Attack']])

#Pokemon with the highest Defense
highest_defense_pokemon = DataPokemon[DataPokemon['Defense'] == DataPokemon['Defense'].max()]
print("Pokemon with the highest Defense:")
print(highest_defense_pokemon[['Name', 'Defense']])

#Pokemon with the lowest Defense
lowest_defense_pokemon = DataPokemon[DataPokemon['Defense'] == DataPokemon['Defense'].min()]
print("\nPokemon with the lowest Defense:")
print(lowest_defense_pokemon[['Name', 'Defense']])

#Pokemon with the highest Sp. Atk
highest_spatk_pokemon = DataPokemon[DataPokemon['Sp. Atk'] == DataPokemon['Sp. Atk'].max()]
print("Pokemon with the highest Sp. Atk:")
print(highest_spatk_pokemon[['Name', 'Sp. Atk']])

#Pokemon with the lowest Sp. Atk
lowest_spatk_pokemon = DataPokemon[DataPokemon['Sp. Atk'] == DataPokemon['Sp. Atk'].min()]
print("\nPokemon with the lowest Sp. Atk:")
print(lowest_spatk_pokemon[['Name', 'Sp. Atk']])

#Pokemon with the highest Sp. Def
highest_spdef_pokemon = DataPokemon[DataPokemon['Sp. Def'] == DataPokemon['Sp. Def'].max()]
print("Pokemon with the highest Sp. Def:")
print(highest_spdef_pokemon[['Name', 'Sp. Def']])

#Pokemon with the lowest Sp. Def
lowest_spdef_pokemon = DataPokemon[DataPokemon['Sp. Def'] == DataPokemon['Sp. Def'].min()]
print("\nPokemon with the lowest Sp. Def:")
print(lowest_spdef_pokemon[['Name', 'Sp. Def']])

#Pokemon with the highest Speed
highest_speed_pokemon = DataPokemon[DataPokemon['Speed'] == DataPokemon['Speed'].max()]
print("Pokemon with the highest Speed:")
print(highest_speed_pokemon[['Name', 'Speed']])

#Pokemon with the lowest Speed
lowest_speed_pokemon = DataPokemon[DataPokemon['Speed'] == DataPokemon['Speed'].min()]
print("\nPokemon with the lowest Speed:")
print(lowest_speed_pokemon[['Name', 'Speed']])

#Count the number of Pokemon in each generation
pokemon_counts_by_generation = DataPokemon.groupby('Generation')['Name'].count()

#Create bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(pokemon_counts_by_generation.index, pokemon_counts_by_generation.values)
plt.xlabel('Generation')
plt.ylabel('Number of Pokemon')
plt.title('Number of Pokemon by Generation')

#Add labels with specific counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom')

plt.show()

# Count the number of Legendary Pokemon
num_legendary = DataPokemon[DataPokemon['Legendary'] == True]['Name'].count()
print("Number of Legendary Pokemon:", num_legendary)

# Count the number of Non-Legendary Pokemon
num_non_legendary = DataPokemon[DataPokemon['Legendary'] == False]['Name'].count()
print("Number of Non-Legendary Pokemon:", num_non_legendary)

#Count the number of Pokemon by Type 1
type1_counts = DataPokemon['Type 1'].value_counts()

#Count the number of Pokemon by Type 2
type2_counts = DataPokemon['Type 2'].value_counts()

#Combine both Type
all_type_counts = type1_counts.add(type2_counts, fill_value=0)

#Sort by the number of Pokemon in descending order
all_type_counts_sorted = all_type_counts.sort_values(ascending=False)

#Create a bar chart
plt.figure(figsize=(15, 6))
bars = plt.bar(all_type_counts_sorted.index, all_type_counts_sorted.values)
plt.xlabel('Type')
plt.ylabel('Number of Pokemon')
plt.title('Number of Pokemon by Type (Type 1 and Type 2)')
plt.xticks(rotation=90)

#Add labels with specific numbers on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.5, int(yval), ha='center', va='bottom')

plt.tight_layout()
plt.show()

#Combine Type 1 and Type 2 into one column 'Type Combined'
combined_types = DataPokemon.melt(id_vars=['Name', 'Total'], value_vars=['Type 1', 'Type 2'],
                                  var_name='Type Category', value_name='Type Combined').dropna()

#Find Pokemon with the highest Total in each combined type
highest_total_pokemon_by_combined_type = combined_types.groupby('Type Combined').apply(lambda x: x.loc[x['Total'].idxmax()])

#Reset index to make 'Type Combined' a regular column again
highest_total_pokemon_by_combined_type = highest_total_pokemon_by_combined_type.reset_index(drop=True)

#Create a bar chart
plt.figure(figsize=(10, 6))  # Adjust figure size as needed
bars = plt.bar(highest_total_pokemon_by_combined_type['Type Combined'], highest_total_pokemon_by_combined_type['Total'])
plt.xlabel('Type')
plt.ylabel('Highest Total Stats')
plt.title('Highest Total Stats of Pokemon by Combined Type')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent overlap

#Add labels with specific totals on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, int(yval), va='bottom', ha='center')  # Add text on top of bar

plt.show()

#Print the name of the Pokemon with the highest total stats for each combined type
for index, row in highest_total_pokemon_by_combined_type.iterrows():
    print(f"{row['Type Combined']}, {row['Name']} ({row['Total']})")